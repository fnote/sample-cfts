AWSTemplateFormatVersion: 2010-09-09
Description: "Reference Price Data Populator for Price Zone data"
Parameters:
  LambdaRole:
    Description: ARN of the iam role for the lambda function
    Type: String
    Default: arn:aws:iam::037295147636:role/CP-REF-ETLTriggerLambaRole-DEV
  StepFuctionExecutionRole:
    Description: ARN of the iam role for the step function
    Type: String
    Default: arn:aws:iam::037295147636:role/CP-REF-ETLStepFunctionExecutionRole-DEV
  GlueJobExecutionRole:
    Description: ARN of the iam role for the glue job
    Type: String
    Default: arn:aws:iam::037295147636:role/CP-REF-ETLGlueRole-DEV
  GlueJobDataBackupRole:
    Description: ARN of the iam role for the glue job to backup data
    Type: String
    Default: arn:aws:iam::037295147636:role/CP-REF-ETLDataBackupGlueRole-DEV
  IntermediateStorage:
    Description: S3 bucket name to store intermediate files
    Type: String
    Default: cp-ref-etl-output-bucket-dev
  ETLDataBackUpStorage:
    Description: S3 bucket to archive files
    Type: String
  NotifierLambdaSecutyGroup:
    Description: The list of Securty groups to use the Cloud Pricing Notification Service Api
    Type: List<AWS::EC2::SecurityGroup::Id>
    Default: sg-014f39d2fd8370bf6
  NotifierLambdaSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of Subnets to use the Cloud Pricing Notification Service Api
    Default: subnet-0a5d9eea71b9c97c6, subnet-0186b43162a344d9a, subnet-0ad1216eb31e15186
  EnvironmentShort:
    Description: Environment for application
    Type: String
    Default: DEV
    AllowedValues:
      - DEV
      - QA
      - STG
      - EXE
      - TST
      - PROD
    ConstraintDescription: Must be a valid environment
  Account:
    Description: Type of AWS account under which the code deploy S3 bucket is available
    Type: String
    Default: nonprod
    AllowedValues:
      - nonprod
      - prod
    ConstraintDescription: Must be a valid account name
  DatabaseConnectionCluster1:
    Description: Name of the databse connection
    Type: String
    Default: cp-ref-etl-common-connection-DEV-cluster-1
  DatabaseConnectionCluster2:
    Description: Name of the databse connection
    Type: String
    Default: cp-ref-etl-common-connection-DEV-cluster-2
  NotifierLambdaArn:
    Description: Arn of the notifier Lambda
    Type: String
    Default: arn:aws:lambda:us-east-1:037295147636:function:CP-REF-etl-notifier-DEV
  ETLMaximumConcurrency:
    Description: Maximum Concurrency Allowed for Price Zone Glue jobs
    Type: String
    Default: 20
  LoadJobMaximumConcurrency:
    Description: Maximum Concurrency Allowed for Price Zone load jobs
    Type: String
    Default: 10
  TransformJobMaxDPUCount:
    Description: Maximum DPU count allocated for Transform spark job
    Type: String
    Default: 149
  TransformJobMinDPUCount:
    Description: Minimum DPU count allocated for Transform spark job
    Type: String
    Default: 10
  PriceZoneFilePartialLoadPrefixes:
    Description: List of prefixes for price zone file partial load prefixes
    Type: String
    Default: ctt,itt
  PriceZoneFileFullLoadPrefixes:
    Description: List of prefixes for price zone file full load prefixes
    Type: String
    Default: wtp
  ActiveOpcos:
    Description: Active Opcos
    Type: String
    Default: '019'
  LoadJobMaxConcurrencyCluster1:
    Description: cluster 1 load job max concurrency
    Type: String
    Default: '4'
  LoadJobMaxConcurrencyCluster2:
    Description: cluster 2 load job max concurrency
    Type: String
    Default: '4'
  PartialLoadMaxSize:
    Description: Max size of the file carrying partial load in GBs beyond this it will be considered a full load
    Type: String
    Default: '5'
  LoadJobSoftValidation:
    Description: if this value is 0 let it pass , if 1 throw error , if 2 load future table , if anything else throw error
    Type: String
    Default: '0'
  TransformJobWorkerType:
    Description: AWS Glue worker type for Spark job
    Type: String
    Default: G.2X
    AllowedValues:
      - Standard
      - G.2X
  PONumber:
    Description: PO Number for billing
    Type: String
    Default: '7000002358'
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Must contain only ASCII characters.
  ApplicationID:
    Description: Application ID - Official Application_ID, this is generated by Sysco's
      CMDB
    Type: String
    Default: APP-001151
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Must contain only ASCII characters.
  ApplicationName:
    Description: Application_Name - Common, user-friendly name
    Type: String
    Default: Cloud Pricing
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Must contain only ASCII characters.
  Approver:
    Description: Person approving instance funding.  This should be Email address
      formatted
    Type: String
    Default: villanueva.loi@corp.sysco.com
    MinLength: '1'
    MaxLength: '255'
  Owner:
    Description: Email address usually Product/ Platform Owner, though team distribution
      list for technical product/platform team contact
    Type: String
    Default: krishan.senevirathne@sysco.com
    MinLength: '1'
    MaxLength: '255'
  Component:
    Description: Component name
    Type: String
    Default: Reference Pricing Api
  SupportEmail:
    Description: Email distribution list for technical product/platform team contact
    Type: String
    Default: 000-BT-PricingPlatform@Corp.sysco.com
    MinLength: '1'
    MaxLength: '255'
  ProjectID:
    Description: Project_ID - BT Project ID for this workload
    Type: String
    Default: BT.001176
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Must contain only ASCII characters.
  2WTAGGER:
    Description: Used by 2nd Watch Managed Services in shared accounts to determine
      if a resource is supported
    Type: String
    Default: team-managed
    MinLength: '1'
    MaxLength: '255'
    AllowedValues:
      - team-managed
      - adlm-managed
      - 2w-managed
    ConstraintDescription: Must contain only ASCII characters.
  Platform:
    Description: Platform
    Type: String
    Default: Cloud Pricing V4

Mappings:
  EnvMap:
    DEV:
      val: dev
      name: Development
    QA:
      val: qa
      name: Quality
    STG:
      val: stg
      name: Staging
    EXE:
      val: exe
      name: Execution
    TST:
      val: tst
      name: Tuning
    PROD:
      val: prod
      name: Production

Resources:
  PriceZoneStorage:
    Type: AWS::S3::Bucket
    DependsOn: LambdaInvokePermission
    Properties:
      BucketName: !Sub
        - 'cp-ref-etl-price-zone-storage-${env}'
        - { env: !FindInMap [ EnvMap, !Ref EnvironmentShort, val ]}
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt PriceZoneInputTrigger.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: gz
          - Event: s3:ObjectCreated:*
            Function: !GetAtt PriceZoneInputTrigger.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: bz2
      Tags:
        - Key: Technical:ApplicationName
          Value: !Ref ApplicationName
        - Key: Technical:ApplicationID
          Value: !Ref ApplicationID
        - Key: Technical:PlatformOwner
          Value: !Ref Owner
        - Key: Technical:Environment
          Value: !FindInMap [ EnvMap, !Ref EnvironmentShort, name ]
        - Key: Support_Email
          Value: !Ref SupportEmail
        - Key: Approver
          Value: !Ref Approver
        - Key: PO_Number
          Value: !Ref PONumber
        - Key: Project_ID
          Value: !Ref ProjectID
        - Key: 2WTAGGER
          Value: !Ref 2WTAGGER
        - Key: Platform
          Value: !Ref Platform
        - Key: Component
          Value: !Ref Component

  PriceZoneSparkJobLogStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub
        - 'cp-ref-etl-price-zone-spark-temp-dir-${env}'
        - { env: !FindInMap [ EnvMap, !Ref EnvironmentShort, val ]}
      Tags:
        - Key: Technical:ApplicationName
          Value: !Ref ApplicationName
        - Key: Technical:ApplicationID
          Value: !Ref ApplicationID
        - Key: Technical:PlatformOwner
          Value: !Ref Owner
        - Key: Technical:Environment
          Value: !FindInMap [ EnvMap, !Ref EnvironmentShort, name ]
        - Key: Support_Email
          Value: !Ref SupportEmail
        - Key: Approver
          Value: !Ref Approver
        - Key: PO_Number
          Value: !Ref PONumber
        - Key: Project_ID
          Value: !Ref ProjectID
        - Key: 2WTAGGER
          Value: !Ref 2WTAGGER
        - Key: Platform
          Value: !Ref Platform
        - Key: Component
          Value: !Ref Component

  PriceZoneETLMaximumConcurrency:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['', ['/CP/', !Ref EnvironmentShort, '/ETL/REF_PRICE/PRICE_ZONE/MAX_CONCURRENCY']]
      Type: String
      Value: !Ref ETLMaximumConcurrency
      Tier: Standard
      Description: Maximum concurrency allowed for Glue jobs

  PriceZoneETLWorkerType:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['', ['/CP/', !Ref EnvironmentShort, '/ETL/REF_PRICE/PRICE_ZONE/WORKER_TYPE']]
      Type: String
      Value: !Ref TransformJobWorkerType
      Tier: Standard
      Description: Worker type for ETL Transform job

  PriceZoneETLMaxWorkerCount:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['', ['/CP/', !Ref EnvironmentShort, '/ETL/REF_PRICE/PRICE_ZONE/WORKER_COUNT/MAX']]
      Type: String
      Value: !Ref TransformJobMaxDPUCount
      Tier: Standard
      Description: DPU count for ETL spark job for Full load

  PriceZoneETLMinWorkerCount:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['', ['/CP/', !Ref EnvironmentShort, '/ETL/REF_PRICE/PRICE_ZONE/WORKER_COUNT/MIN']]
      Type: String
      Value: !Ref TransformJobMinDPUCount
      Tier: Standard
      Description: DPU count for ETL spark job for New customer

  PriceZoneETLPartialLoadPrefixes:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['', ['/CP/', !Ref EnvironmentShort, '/ETL/REF_PRICE/PRICE_ZONE/PARTIAL_LOAD_PREFIXES']]
      Type: String
      Value: !Ref PriceZoneFilePartialLoadPrefixes
      Tier: Standard
      Description: List of prefixes for price zone file partial load prefixes

  PriceZoneETLFullLoadPrefixes:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join [ '', [ '/CP/', !Ref EnvironmentShort, '/ETL/REF_PRICE/PRICE_ZONE/FULL_LOAD_PREFIXES' ] ]
      Type: String
      Value: !Ref PriceZoneFileFullLoadPrefixes
      Tier: Standard
      Description: List of prefixes for price zone file full load prefixes

  PriceZoneETLActiveOpcos:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ['', ['/CP/', !Ref EnvironmentShort, '/ETL/REF_PRICE/PRICE_ZONE/ACTIVE/BUSINESS/UNITS']]
      Type: String
      Value: !Ref ActiveOpcos
      Description: Active opcos available for price zone

  PriceZoneLoadJobMaxConcurrencyCluster1:
    Type: AWS::SSM::Parameter
    Properties:
        Name: !Join [ '', [ '/CP/', !Ref EnvironmentShort, '/ETL/REF_PRICE/PRICE_ZONE/LOAD_JOB/CLUSTER_1/MAX_CONCURRENCY' ] ]
        Type: String
        Value: !Ref LoadJobMaxConcurrencyCluster1
        Description: cluster 1 max load job count

  PriceZoneLoadJobMaxConcurrencyCluster2:
    Type: AWS::SSM::Parameter
    Properties:
        Name: !Join [ '', [ '/CP/', !Ref EnvironmentShort, '/ETL/REF_PRICE/PRICE_ZONE/LOAD_JOB/CLUSTER_2/MAX_CONCURRENCY' ] ]
        Type: String
        Value: !Ref LoadJobMaxConcurrencyCluster2
        Description: cluster 2 max load job count

  PriceZoneInputFileSizePartialLoadUpperBound:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join [ '', [ '/CP/', !Ref EnvironmentShort, '/ETL/REF_PRICE/PRICE_ZONE/PARTIAL_LOAD_FILE_SIZE_UPPER_BOUND' ] ]
      Type: String
      Value: !Ref PartialLoadMaxSize
      Description: min file size of the input file to be considered a full load

  PriceZoneLoadJobSoftValidation:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join [ '', [ '/CP/', !Ref EnvironmentShort, '/ETL/REF_PRICE/PRICE_ZONE/FULL_EXPORT_LOADING/SOFT_VALIDATION' ] ]
      Type: String
      Value: !Ref LoadJobSoftValidation
      Description: future table is not empty when full export is received and we load looking at the value set here if 0 throw error

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PriceZoneInputTrigger.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub
        - 'arn:aws:s3:::cp-ref-etl-price-zone-storage-${env}'
        - { env: !FindInMap [ EnvMap, !Ref EnvironmentShort, val ]}

  PriceZoneInputTrigger:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function that listens to price zone data file uploads and triggers the step function
      FunctionName: !Sub 'CP-REF-etl-price-zone-trigger-${EnvironmentShort}'
      Runtime: python3.8
      Role: !Ref LambdaRole
      Handler: s3_trigger_lambda.lambda_handler
      Code:
        S3Bucket: !Sub 'sysco-us-east-1-prcp-${Account}-codedeploy'
        S3Key: !Sub 'ReferencePricingApi/DataPopulator/${EnvironmentShort}/price_zone/s3_trigger_lambda.zip'
      Environment:
        Variables:
          stepFunctionArn: !Ref PriceZoneStateMachine
          intermediateStorageS3: !Ref IntermediateStorage
          env: !Ref EnvironmentShort
      Timeout: 60
      Tags:
        - Key: Technical:ApplicationName
          Value: !Ref ApplicationName
        - Key: Technical:ApplicationID
          Value: !Ref ApplicationID
        - Key: Technical:PlatformOwner
          Value: !Ref Owner
        - Key: Technical:Environment
          Value: !FindInMap [ EnvMap, !Ref EnvironmentShort, name ]
        - Key: Support_Email
          Value: !Ref SupportEmail
        - Key: Approver
          Value: !Ref Approver
        - Key: PO_Number
          Value: !Ref PONumber
        - Key: Project_ID
          Value: !Ref ProjectID
        - Key: 2WTAGGER
          Value: !Ref 2WTAGGER
        - Key: Platform
          Value: !Ref Platform
        - Key: Component
          Value: !Ref Component

  PriceZoneDecompressJob:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: pythonshell
        PythonVersion: 3
        ScriptLocation: !Sub 's3://sysco-us-east-1-prcp-${Account}-codedeploy/ReferencePricingApi/DataPopulator/${EnvironmentShort}/price_zone/decompress_job.py'
      DefaultArguments:
        "--job-bookmark-option": "job-bookmark-disable"
        "--extra-py-files": !Sub "s3://sysco-us-east-1-prcp-${Account}-codedeploy/ReferencePricingApi/DataPopulator/${EnvironmentShort}/price_zone/smart_open-2.1.0-py3.6.egg"
      ExecutionProperty:
        MaxConcurrentRuns: !Ref ETLMaximumConcurrency
      GlueVersion: 1.0
      MaxRetries: 0
      MaxCapacity: 1.0
      Timeout: 4320
      Name: !Sub 'CP-REF-etl-price-zone-decompression-job-${EnvironmentShort}'
      Role: !Ref GlueJobExecutionRole
      Tags: {
        'Technical:ApplicationName': !Ref ApplicationName,
        'Technical:ApplicationID': !Ref ApplicationID,
        'Technical:PlatformOwner': !Ref Owner,
        'Technical:Environment': !FindInMap [ EnvMap, !Ref EnvironmentShort, name ],
        'Support_Email': !Ref SupportEmail,
        'Approver': !Ref Approver,
        'PO_Number': !Ref PONumber,
        'Project_ID': !Ref ProjectID,
        '2WTAGGER': !Ref 2WTAGGER,
        'Platform': !Ref Platform,
        'Component': !Ref Component
      }

  PriceZoneTransformJob:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: glueetl
        PythonVersion: 3
        ScriptLocation: !Sub 's3://sysco-us-east-1-prcp-${Account}-codedeploy/ReferencePricingApi/DataPopulator/${EnvironmentShort}/price_zone/transform_spark_job.py'
      DefaultArguments:
        "--extra-py-files": !Sub "s3://sysco-us-east-1-prcp-${Account}-codedeploy/ReferencePricingApi/DataPopulator/${EnvironmentShort}/price_zone/validator.py,s3://sysco-us-east-1-prcp-${Account}-codedeploy/ReferencePricingApi/DataPopulator/${EnvironmentShort}/price_zone/constants.py"
        "--enable-metrics": ""
        "--enable-continuous-cloudwatch-log": "true"
        "--enable-continuous-log-filter": "true"
        "--enable-spark-ui": 'true'
        "--spark-event-logs-path": !Sub "s3://${PriceZoneSparkJobLogStorage}"
        "--TempDir": !Sub "s3://${PriceZoneSparkJobLogStorage}"
        "--METADATA_LAMBDA": !Sub 'CP-REF-PRICE-etl-metadata-aggregator-${EnvironmentShort}'
      ExecutionProperty:
        MaxConcurrentRuns: !Ref ETLMaximumConcurrency
      GlueVersion: 2.0
      WorkerType: !Ref TransformJobWorkerType
      NumberOfWorkers: !Ref TransformJobMaxDPUCount
      MaxRetries: 0
      Name: !Sub 'CP-REF-etl-price-zone-transform-job-${EnvironmentShort}'
      Role: !Ref GlueJobExecutionRole
      Tags: {
        'Technical:ApplicationName': !Ref ApplicationName,
        'Technical:ApplicationID': !Ref ApplicationID,
        'Technical:PlatformOwner': !Ref Owner,
        'Technical:Environment': !FindInMap [ EnvMap, !Ref EnvironmentShort, name ],
        'Support_Email': !Ref SupportEmail,
        'Approver': !Ref Approver,
        'PO_Number': !Ref PONumber,
        'Project_ID': !Ref ProjectID,
        '2WTAGGER': !Ref 2WTAGGER,
        'Platform': !Ref Platform,
        'Component': !Ref Component
      }

  OpCoFilesFetchLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function that fetches the list of OpCo wise partitioned files
      FunctionName: !Sub 'CP-REF-etl-price-zone-opco-files-fetch-${EnvironmentShort}'
      Runtime: python3.7
      Role: !Ref LambdaRole
      Handler: index.lambda_handler
      Code:
        S3Bucket: !Sub 'sysco-us-east-1-prcp-${Account}-codedeploy'
        S3Key: !Sub 'ReferencePricingApi/DataPopulator/${EnvironmentShort}/price_zone/FetchFileListLambda.zip'
      VpcConfig:
        SecurityGroupIds:
          !Ref NotifierLambdaSecutyGroup
        SubnetIds:
          !Ref NotifierLambdaSubnets
      Timeout: 180
      Tags:
        - Key: Technical:ApplicationName
          Value: !Ref ApplicationName
        - Key: Technical:ApplicationID
          Value: !Ref ApplicationID
        - Key: Technical:PlatformOwner
          Value: !Ref Owner
        - Key: Technical:Environment
          Value: !FindInMap [ EnvMap, !Ref EnvironmentShort, name ]
        - Key: Support_Email
          Value: !Ref SupportEmail
        - Key: Approver
          Value: !Ref Approver
        - Key: PO_Number
          Value: !Ref PONumber
        - Key: Project_ID
          Value: !Ref ProjectID
        - Key: 2WTAGGER
          Value: !Ref 2WTAGGER
        - Key: Platform
          Value: !Ref Platform
        - Key: Component
          Value: !Ref Component

  PriceZoneAnalyseLoadOrWaitLambda:
    Type: AWS::Lambda::Function
    Properties:
        Description: Lambda function that analyzes status of previous job runs
        FunctionName: !Sub 'CP-REF-etl-price-zone-Analyse-Load-or-wait-${EnvironmentShort}'
        Runtime: python3.7
        Role: !Ref LambdaRole
        Handler: index.lambda_handler
        Code:
          S3Bucket: !Sub 'sysco-us-east-1-prcp-${Account}-codedeploy'
          S3Key: !Sub 'ReferencePricingApi/DataPopulator/${EnvironmentShort}/price_zone/AnalyzeWaitOrLoadClusterLambda.zip'
        VpcConfig:
          SecurityGroupIds:
            !Ref NotifierLambdaSecutyGroup
          SubnetIds:
            !Ref NotifierLambdaSubnets
        Timeout: 60
        Tags:
          - Key: Technical:ApplicationName
            Value: !Ref ApplicationName
          - Key: Technical:ApplicationID
            Value: !Ref ApplicationID
          - Key: Technical:PlatformOwner
            Value: !Ref Owner
          - Key: Technical:Environment
            Value: !FindInMap [ EnvMap, !Ref EnvironmentShort, name ]
          - Key: Support_Email
            Value: !Ref SupportEmail
          - Key: Approver
            Value: !Ref Approver
          - Key: PO_Number
            Value: !Ref PONumber
          - Key: Project_ID
            Value: !Ref ProjectID
          - Key: 2WTAGGER
            Value: !Ref 2WTAGGER
          - Key: Platform
            Value: !Ref Platform
          - Key: Component
            Value: !Ref Component
  PriceZoneJobStatusAnalyzerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function that analyzes status of previous job runs
      FunctionName: !Sub 'CP-REF-etl-price-zone-job-status-analyzer-${EnvironmentShort}'
      Runtime: python3.7
      Role: !Ref LambdaRole
      Handler: index.lambda_handler
      Code:
        S3Bucket: !Sub 'sysco-us-east-1-prcp-${Account}-codedeploy'
        S3Key: !Sub 'ReferencePricingApi/DataPopulator/${EnvironmentShort}/price_zone/TakeBackupDecisionLambda.zip'
      VpcConfig:
        SecurityGroupIds:
          !Ref NotifierLambdaSecutyGroup
        SubnetIds:
          !Ref NotifierLambdaSubnets
      Timeout: 60
      Tags:
        - Key: Technical:ApplicationName
          Value: !Ref ApplicationName
        - Key: Technical:ApplicationID
          Value: !Ref ApplicationID
        - Key: Technical:PlatformOwner
          Value: !Ref Owner
        - Key: Technical:Environment
          Value: !FindInMap [ EnvMap, !Ref EnvironmentShort, name ]
        - Key: Support_Email
          Value: !Ref SupportEmail
        - Key: Approver
          Value: !Ref Approver
        - Key: PO_Number
          Value: !Ref PONumber
        - Key: Project_ID
          Value: !Ref ProjectID
        - Key: 2WTAGGER
          Value: !Ref 2WTAGGER
        - Key: Platform
          Value: !Ref Platform
        - Key: Component
          Value: !Ref Component

  PriceZoneETLWaitStatusAnalyzerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function that checks the execution status of a given step function
      FunctionName: !Sub 'CP-REF-etl-price-zone-wait-status-analyzer-${EnvironmentShort}'
      Runtime: python3.8
      Role: !Ref LambdaRole
      Handler: analyze_etl_wait_status.lambda_handler
      Code:
        S3Bucket: !Sub 'sysco-us-east-1-prcp-${Account}-codedeploy'
        S3Key: !Sub 'ReferencePricingApi/DataPopulator/${EnvironmentShort}/price_zone/analyze_etl_wait_status.zip'
      Environment:
        Variables:
          intermediateStorageS3: !Ref IntermediateStorage
          env: !Ref EnvironmentShort
      Timeout: 60
      Tags:
        - Key: Technical:ApplicationName
          Value: !Ref ApplicationName
        - Key: Technical:ApplicationID
          Value: !Ref ApplicationID
        - Key: Technical:PlatformOwner
          Value: !Ref Owner
        - Key: Technical:Environment
          Value: !FindInMap [ EnvMap, !Ref EnvironmentShort, name ]
        - Key: Support_Email
          Value: !Ref SupportEmail
        - Key: Approver
          Value: !Ref Approver
        - Key: PO_Number
          Value: !Ref PONumber
        - Key: Project_ID
          Value: !Ref ProjectID
        - Key: 2WTAGGER
          Value: !Ref 2WTAGGER
        - Key: Platform
          Value: !Ref Platform
        - Key: Component
          Value: !Ref Component

  PriceZoneDataLoadJob:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: pythonshell
        PythonVersion: 3
        ScriptLocation: !Sub 's3://sysco-us-east-1-prcp-${Account}-codedeploy/ReferencePricingApi/DataPopulator/${EnvironmentShort}/price_zone/load_job.py'
      DefaultArguments:
        "--extra-py-files": !Sub 's3://sysco-us-east-1-prcp-${Account}-codedeploy/ReferencePricingApi/DataPopulator/${EnvironmentShort}/price_zone/libraries/SQLAlchemy-1.3.17-cp35-cp35m-manylinux2010_x86_64.whl,s3://sysco-us-east-1-prcp-${Account}-codedeploy/ReferencePricingApi/DataPopulator/${EnvironmentShort}/price_zone/libraries/PyMySQL-0.9.3-py2.py3-none-any.whl'
        "--METADATA_LAMBDA": !Sub 'CP-REF-PRICE-etl-metadata-aggregator-${EnvironmentShort}'
      ExecutionProperty:
        MaxConcurrentRuns: !Ref LoadJobMaximumConcurrency
      GlueVersion: 1.0
      MaxRetries: 0
      MaxCapacity: 1.0
      Connections:
        Connections:
          - !Ref DatabaseConnectionCluster1
          - !Ref DatabaseConnectionCluster2
      Name: !Sub 'CP-REF-etl-price-zone-load-job-${EnvironmentShort}'
      Role: !Ref GlueJobExecutionRole
      Tags: {
        'Technical:ApplicationName': !Ref ApplicationName,
        'Technical:ApplicationID': !Ref ApplicationID,
        'Technical:PlatformOwner': !Ref Owner,
        'Technical:Environment': !FindInMap [ EnvMap, !Ref EnvironmentShort, name ],
        'Support_Email': !Ref SupportEmail,
        'Approver': !Ref Approver,
        'PO_Number': !Ref PONumber,
        'Project_ID': !Ref ProjectID,
        '2WTAGGER': !Ref 2WTAGGER,
        'Platform': !Ref Platform,
        'Component': !Ref Component
      }

  PriceZoneDataBackupJob:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: pythonshell
        PythonVersion: 3
        ScriptLocation: !Sub 's3://sysco-us-east-1-prcp-${Account}-codedeploy/ReferencePricingApi/DataPopulator/${EnvironmentShort}/price_zone/data_backup_job.py'
      DefaultArguments:
        "--INTERMEDIATE_S3_BUCKET": !Ref IntermediateStorage
        "--ARCHIVING_S3_BUCKET": !Ref ETLDataBackUpStorage
        "--extra-py-files": !Sub "s3://sysco-us-east-1-prcp-${Account}-codedeploy/ReferencePricingApi/DataPopulator/${EnvironmentShort}/common_scripts/move_s3_objects.py"
      ExecutionProperty:
        MaxConcurrentRuns: !Ref ETLMaximumConcurrency
      GlueVersion: 1.0
      MaxRetries: 0
      MaxCapacity: 1.0
      Name: !Sub 'CP-REF-etl-price-zone-backup-job-${EnvironmentShort}'
      Role: !Ref GlueJobDataBackupRole
      Tags: {
        'Technical:ApplicationName': !Ref ApplicationName,
        'Technical:ApplicationID': !Ref ApplicationID,
        'Technical:PlatformOwner': !Ref Owner,
        'Technical:Environment': !FindInMap [ EnvMap, !Ref EnvironmentShort, name ],
        'Support_Email': !Ref SupportEmail,
        'Approver': !Ref Approver,
        'PO_Number': !Ref PONumber,
        'Project_ID': !Ref ProjectID,
        '2WTAGGER': !Ref 2WTAGGER,
        'Platform': !Ref Platform,
        'Component': !Ref Component
      }

  PriceZoneStepFunctionExecutionLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 'cp-ref-etl-price-zone-step-function-logs-${EnvironmentShort}'
      RetentionInDays: 30

  PriceZoneStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub 'CP-REF-etl-price-zone-state-machine-${EnvironmentShort}'
      StateMachineType: STANDARD
      DefinitionString: !Sub
        - |-
          {
             "Comment":"Transform and Loads EATs data from S3 to DB",
             "StartAt":"Analyze wait status",
             "States":{
                "Analyze wait status":{
                   "Type":"Task",
                   "Resource":"arn:aws:states:::lambda:invoke",
                   "Parameters":{
                      "FunctionName":"${waitStatusAnalyzerLambdaArn}",
                      "Payload":{
                         "stepFunctionExecutionId.$":"$$.Execution.Id",
                         "stepFunctionArn.$":"$$.StateMachine.Id"
                      }
                   },
                   "ResultPath":"$.waitStatus",
                   "Catch":[
                      {
                         "ErrorEquals":[
                            "States.TaskFailed"
                         ],
                         "ResultPath":"$.error",
                         "Next":"Notify Failure2"
                      }
                   ],
                   "Next":"WaitOrContinue"
                },
                "WaitOrContinue":{
                   "Comment":"Check on wait status and wait or continue ETL",
                   "Type":"Choice",
                   "Choices":[
                      {
                         "Variable":"$.waitStatus.Payload.shouldWait",
                         "BooleanEquals":true,
                         "Next":"waitExecution"
                      }
                   ],
                   "Default":"BzipOrGzip"
                },
                "waitExecution":{
                   "Type":"Wait",
                   "Seconds":300,
                   "Next":"Analyze wait status"
                },
                "BzipOrGzip":{
                   "Comment":"Check file type",
                   "Type":"Choice",
                   "Choices":[
                      {
                         "Variable":"$.file_type",
                         "StringEquals":"gz",
                         "Next":"Decompress"
                      },
                      {
                         "Variable":"$.file_type",
                         "StringEquals":"bz2",
                         "Next":"Transform"
                      }
                   ],
                   "Default":"Notify Failure2"
                },
                "Decompress":{
                   "Comment":"Decompress python shell job",
                   "Type":"Task",
                   "Resource":"arn:aws:states:::glue:startJobRun.sync",
                   "Parameters":{
                      "JobName":"${priceZoneDecompressJobName}",
                      "Arguments":{
                         "--s3_path.$":"$.s3_path",
                         "--decompressed_file_path.$":"$.decompressed_file_path"
                      }
                   },
                   "ResultPath":"$.response",
                   "Catch":[
                      {
                         "ErrorEquals":[
                            "States.TaskFailed"
                         ],
                         "ResultPath":"$.error",
                         "Next":"Notify Failure2"
                      }
                   ],
                   "Next":"Transform"
                },
                "Transform":{
                   "Comment":"Transform spark job",
                   "Type":"Task",
                   "Resource":"arn:aws:states:::glue:startJobRun.sync",
                   "Parameters":{
                      "JobName":"${priceZoneTransformJobName}",
                      "Arguments":{
                         "--s3_path.$":"$.s3_path",
                         "--file_type.$":"$.file_type",
                         "--decompressed_file_path.$":"$.decompressed_file_path",
                         "--partitioned_files_path.$":"$.partitioned_files_path",
                         "--enable-continuous-cloudwatch-log":"true",
                         "--active_opcos.$":"$.active_opcos",
                         "--intermediate_s3_name.$":"$.intermediate_s3_name",
                         "--intermediate_directory_path.$":"$.intermediate_directory_path",
                         "--metadata_aggregator":"${metadataAggregator}"
                      },
                      "NumberOfWorkers.$":"$.worker_count",
                      "WorkerType.$":"$.worker_type"
                   },
                   "ResultPath":"$.response",
                   "Catch":[
                      {
                         "ErrorEquals":[
                            "States.TaskFailed"
                         ],
                         "ResultPath":"$.error",
                         "Next":"Notify Failure2"
                      }
                   ],
                   "Next":"Fetch File List"
                },
                "Fetch File List":{
                   "Type":"Task",
                   "Resource":"arn:aws:states:::lambda:invoke",
                   "Parameters":{
                      "FunctionName":"${opCoFilesFetchLambdaArn}",
                      "Payload":{
                         "ENV.$":"$.ENV",
                         "s3_object_key.$":"$.s3_input_file_key",
                         "etl_timestamp.$":"$.etl_timestamp",
                         "active_opcos.$":"$.active_opcos",
                         "intermediate_s3_name.$":"$.intermediate_s3_name",
                         "partitioned_files_key.$":"$.partitioned_files_key",
                         "file_type.$":"$.file_prefix",
                         "partial_load.$":"$.partial_load"
                      }
                   },
                   "ResultPath":"$.opcoList",
                   "Catch":[
                      {
                         "ErrorEquals":[
                            "States.TaskFailed"
                         ],
                         "ResultPath":"$.error",
                         "Next":"Notify Failure2"
                      }
                   ],
                   "Next":"Cluster division"
                },
                "Cluster division":{
                   "Type":"Parallel",
                   "End":true,
                   "Branches":[
                      {
                         "Comment":"Transform and Loads EATs data from S3 to DB",
                         "StartAt":"Analyze wait or load status",
                         "States":{
                            "Analyze wait or load status":{
                               "Type":"Task",
                               "Next":"WaitOrLoadOrTerminate",
                               "Resource":"arn:aws:states:::lambda:invoke",
                               "Parameters":{
                                  "FunctionName":"${AnalyseLoadOrWaitLambdaArn}",
                                  "Payload":{
                                     "Input.$":"$.opcoList.Payload.cluster_a",
                                     "cluster":"1",
                                     "ENV.$":"$.ENV",
                                     "stepFunctionExecutionId.$":"$$.Execution.Id",
                                     "stepFunctionArn.$":"$$.StateMachine.Id"
                                  }
                               },
                               "ResultPath":"$.nextStep"
                            },
                            "WaitOrLoadOrTerminate":{
                               "Comment":"Check on wait status load or terminate",
                               "Type":"Choice",
                               "Choices":[
                                  {
                                     "Variable":"$.nextStep.Payload.nextStep",
                                     "StringEquals":"Wait",
                                     "Next":"Wait"
                                  },
                                  {
                                     "Variable":"$.nextStep.Payload.nextStep",
                                     "StringEquals":"Load All",
                                     "Next":"Load All"
                                  }
                               ],
                               "Default":"Terminate"
                            },
                            "Terminate":{
                               "Type":"Succeed"
                            },
                            "Wait":{
                               "Type":"Wait",
                               "Seconds":300,
                               "Next":"Analyze wait or load status"
                            },
                            "Notify Failure":{
                               "Type":"Task",
                               "Resource":"arn:aws:states:::lambda:invoke",
                               "Parameters":{
                                  "FunctionName":"${notifierLambdaArn}",
                                  "Payload":{
                                     "message.$":"States.Format('S3 Path: {}, ETL timestamp: {}, Execution Id: {}, Error: {}', $.s3_path, $.etl_timestamp, $$.Execution.Id, $.error.Cause)",
                                     "event":"ETL-PRICE_ZONE",
                                     "additional_info_file_s3.$":"$.intermediate_s3_name",
                                     "additional_info_file_key.$":"$.intermediate_directory_path",
                                     "backup_bucket.$":"$.backup_bucket",
                                     "backup_file_path.$":"$.backup_file_path",
                                     "etl_output_path_key.$":"$.etl_output_path_key",
                                     "stepFunctionExecutionId.$":"$$.Execution.Id"
                                  }
                               },
                               "End":true
                            },
                            "Load All":{
                               "Type":"Map",
                               "ItemsPath":"$.opcoList.Payload.cluster_a",
                               "MaxConcurrency":4,
                               "Parameters":{
                                  "id.$":"$$.Map.Item.Value",
                                  "partitioned_files_key.$":"$.partitioned_files_key",
                                  "intermediate_s3_name.$":"$.intermediate_s3_name",
                                  "intermediate_directory_path.$":"$.intermediate_directory_path",
                                  "etl_timestamp.$":"$.etl_timestamp",
                                  "partial_load.$":"$.partial_load",
                                  "etl_output_path_key.$":"$.etl_output_path_key",
                                  "backup_bucket.$":"$.backup_bucket",
                                  "backup_file_path.$":"$.backup_file_path",
                                  "ENV.$":"$.ENV",
                                  "cluster":"1"
                               },
                               "Iterator":{
                                  "StartAt":"Load Job",
                                  "States":{
                                     "Load Job":{
                                        "Type":"Task",
                                        "Resource":"arn:aws:states:::glue:startJobRun.sync",
                                        "Parameters":{
                                           "JobName":"${priceZoneDataLoadJobName}",
                                           "Arguments":{
                                              "--opco_id.$":"$.id",
                                              "--partial_load.$":"$.partial_load",
                                              "--partitioned_files_key.$":"$.partitioned_files_key",
                                              "--intermediate_s3_name.$":"$.intermediate_s3_name",
                                              "--intermediate_directory_path.$":"$.intermediate_directory_path",
                                              "--etl_timestamp.$":"$.etl_timestamp",
                                              "--ENV.$":"$.ENV",
                                              "--cluster":"1"
                                           }
                                        },
                                        "Retry":[
                                           {
                                              "ErrorEquals":[
                                                 "States.TaskFailed"
                                              ],
                                              "IntervalSeconds":3,
                                              "MaxAttempts":2,
                                              "BackoffRate":10
                                           }
                                        ],
                                        "Catch":[
                                           {
                                              "ErrorEquals":[
                                                 "States.TaskFailed"
                                              ],
                                              "ResultPath":"$.error",
                                              "Next":"Notify Job Failure"
                                           }
                                        ],
                                        "ResultPath":"$.loadJob",
                                        "End":true
                                     },
                                     "Notify Job Failure":{
                                        "Type":"Task",
                                        "Resource":"arn:aws:states:::lambda:invoke",
                                        "Parameters":{
                                           "FunctionName":"${notifierLambdaArn}",
                                           "Payload":{
                                              "opco_id.$":"$.id",
                                              "message.$":"$.error.Cause",
                                              "event":"ETL-PRICE_ZONE",
                                              "additional_info_file_s3.$":"$.intermediate_s3_name",
                                              "etl_output_path_key.$":"$.etl_output_path_key",
                                              "backup_bucket.$":"$.backup_bucket",
                                              "backup_file_path.$":"$.backup_file_path",
                                              "stepFunctionExecutionId.$":"$$.Execution.Id"
                                           }
                                        },
                                        "End":true
                                     }
                                  }
                               },
                               "ResultPath":"$.loadJobsResult",
                               "Next":"Analyze load job statuses"
                            },
                            "Analyze load job statuses":{
                               "Type":"Task",
                               "Resource":"arn:aws:states:::lambda:invoke",
                               "Parameters":{
                                  "FunctionName":"${jobStatusAnalyzerLambdaArn}",
                                  "Payload":{
                                     "allocated_job_count.$":"$.nextStep.Payload.allocatedJobCount",
                                     "loadJobStatuses.$":"$.loadJobsResult",
                                     "s3_object_key.$":"$.s3_input_file_key",
                                     "etl_timestamp.$":"$.etl_timestamp",
                                     "cluster_opcos.$":"$.opcoList.Payload.cluster_a",
                                     "cluster":1,
                                     "ENV.$":"$.ENV"
                                  }
                               },
                               "ResultPath":"$.loadJobStatuses",
                               "Catch":[
                                  {
                                     "ErrorEquals":[
                                        "States.TaskFailed"
                                     ],
                                     "ResultPath":"$.error",
                                     "Next":"Notify Failure"
                                  }
                               ],
                               "Next":"BackupOrNot"
                            },
                            "BackupOrNot":{
                               "Comment":"Check on load job statuses and decide data backup",
                               "Type":"Choice",
                               "Choices":[
                                  {
                                     "Variable":"$.loadJobStatuses.Payload.shouldBackup",
                                     "BooleanEquals":true,
                                     "Next":"Backup Data"
                                  }
                               ],
                               "Default":"Skip Backup"
                            },
                            "Backup Data":{
                               "Comment":"Backup data python shell job",
                               "Type":"Task",
                               "Resource":"arn:aws:states:::glue:startJobRun.sync",
                               "Parameters":{
                                  "JobName":"${priceZoneDataBackupJobName}",
                                  "Arguments":{
                                     "--s3_input_bucket.$":"$.s3_input_bucket",
                                     "--s3_input_file_key.$":"$.s3_input_file_key",
                                     "--etl_timestamp.$":"$.etl_timestamp",
                                     "--partitioned_files_key.$":"$.partitioned_files_key",
                                     "--decompressed_file_path.$":"$.decompressed_file_path",
                                     "--etl_output_path_key.$":"$.etl_output_path_key",
                                     "--backup_file_path.$":"$.backup_file_path",
                                     "--intermediate_directory_path.$":"$.intermediate_directory_path",
                                     "--file_type.$" : "$.file_type"
                                  }
                               },
                               "ResultPath":"$.response",
                               "Catch":[
                                  {
                                     "ErrorEquals":[
                                        "States.TaskFailed"
                                     ],
                                     "ResultPath":"$.error",
                                     "Next":"Notify Failure"
                                  }
                               ],
                               "Next":"Notify ETL Success"
                            },
                            "Skip Backup":{
                               "Type":"Succeed"
                            },
                            "Notify ETL Success":{
                               "Type":"Task",
                               "Resource":"arn:aws:states:::lambda:invoke",
                               "Parameters":{
                                  "FunctionName":"${notifierLambdaArn}",
                                  "Payload":{
                                     "event":"[ETL] - [Ref Price] [Price Zone Data]",
                                     "backup_bucket.$":"$.backup_bucket",
                                     "backup_file_path.$":"$.backup_file_path",
                                     "message.$":"States.Format('S3 Path: {}, ETL timestamp: {}, Execution Id: {}', $.s3_path, $.etl_timestamp, $$.Execution.Id)",
                                     "additional_info_file_s3":"${backupS3Name}",
                                     "etl_timestamp.$":"$.etl_timestamp",
                                     "file_name.$":"$.s3_input_file_key",
                                     "etl_output_path_key.$":"$.etl_output_path_key",
                                     "status":"SUCCEEDED"
                                  }
                               },
                               "End":true
                            }
                         }
                      },
                      {
                         "StartAt":"Analyze wait or load statusC2",
                         "States":{
                            "Analyze wait or load statusC2":{
                               "Type":"Task",
                               "Next":"WaitOrLoadOrTerminateC2",
                               "Resource":"arn:aws:states:::lambda:invoke",
                               "Parameters":{
                                  "FunctionName":"${AnalyseLoadOrWaitLambdaArn}",
                                  "Payload":{
                                     "Input.$":"$.opcoList.Payload.cluster_b",
                                     "cluster":"2",
                                     "ENV.$":"$.ENV",
                                     "stepFunctionExecutionId.$":"$$.Execution.Id",
                                     "stepFunctionArn.$":"$$.StateMachine.Id"
                                  }
                               },
                               "ResultPath":"$.nextStep"
                            },
                            "WaitOrLoadOrTerminateC2":{
                               "Comment":"Check on wait status load or terminate",
                               "Type":"Choice",
                               "Choices":[
                                  {
                                     "Variable":"$.nextStep.Payload.nextStep",
                                     "StringEquals":"Wait",
                                     "Next":"WaitC2"
                                  },
                                  {
                                     "Variable":"$.nextStep.Payload.nextStep",
                                     "StringEquals":"Load All",
                                     "Next":"Load AllC2"
                                  }
                               ],
                               "Default":"TerminateC2"
                            },
                            "TerminateC2":{
                               "Type":"Succeed"
                            },
                            "WaitC2":{
                               "Type":"Wait",
                               "Seconds":300,
                               "Next":"Analyze wait or load statusC2"
                            },
                            "Notify FailureC2":{
                               "Type":"Task",
                               "Resource":"arn:aws:states:::lambda:invoke",
                               "Parameters":{
                                  "FunctionName":"${notifierLambdaArn}",
                                  "Payload":{
                                     "message.$":"States.Format('S3 Path: {}, ETL timestamp: {}, Execution Id: {}, Error: {}', $.s3_path, $.etl_timestamp, $$.Execution.Id, $.error.Cause)",
                                     "event":"ETL-PRICE_ZONE",
                                     "additional_info_file_s3.$":"$.intermediate_s3_name",
                                     "additional_info_file_key.$":"$.intermediate_directory_path",
                                     "backup_bucket.$":"$.backup_bucket",
                                     "backup_file_path.$":"$.backup_file_path",
                                     "etl_output_path_key.$":"$.etl_output_path_key",
                                     "stepFunctionExecutionId.$":"$$.Execution.Id"
                                  }
                               },
                               "End":true
                            },
                            "Load AllC2":{
                               "Type":"Map",
                               "ItemsPath":"$.opcoList.Payload.cluster_b",
                               "MaxConcurrency":4,
                               "Parameters":{
                                  "id.$":"$$.Map.Item.Value",
                                  "partitioned_files_key.$":"$.partitioned_files_key",
                                  "intermediate_s3_name.$":"$.intermediate_s3_name",
                                  "intermediate_directory_path.$":"$.intermediate_directory_path",
                                  "etl_timestamp.$":"$.etl_timestamp",
                                  "partial_load.$":"$.partial_load",
                                  "etl_output_path_key.$":"$.etl_output_path_key",
                                  "backup_bucket.$":"$.backup_bucket",
                                  "backup_file_path.$":"$.backup_file_path",
                                  "ENV.$":"$.ENV",
                                  "cluster":"2"
                               },
                               "Iterator":{
                                  "StartAt":"Load JobC2",
                                  "States":{
                                     "Load JobC2":{
                                        "Type":"Task",
                                        "Resource":"arn:aws:states:::glue:startJobRun.sync",
                                        "Parameters":{
                                           "JobName":"${priceZoneDataLoadJobName}",
                                           "Arguments":{
                                              "--opco_id.$":"$.id",
                                              "--partial_load.$":"$.partial_load",
                                              "--partitioned_files_key.$":"$.partitioned_files_key",
                                              "--intermediate_s3_name.$":"$.intermediate_s3_name",
                                              "--intermediate_directory_path.$":"$.intermediate_directory_path",
                                              "--etl_timestamp.$":"$.etl_timestamp",
                                              "--ENV.$":"$.ENV",
                                              "--cluster":"2"
                                           }
                                        },
                                        "Retry":[
                                           {
                                              "ErrorEquals":[
                                                 "States.TaskFailed"
                                              ],
                                              "IntervalSeconds":3,
                                              "MaxAttempts":2,
                                              "BackoffRate":10
                                           }
                                        ],
                                        "Catch":[
                                           {
                                              "ErrorEquals":[
                                                 "States.TaskFailed"
                                              ],
                                              "ResultPath":"$.error",
                                              "Next":"Notify Job FailureC2"
                                           }
                                        ],
                                        "ResultPath":"$.loadJob",
                                        "End":true
                                     },
                                     "Notify Job FailureC2":{
                                        "Type":"Task",
                                        "Resource":"arn:aws:states:::lambda:invoke",
                                        "Parameters":{
                                           "FunctionName":"${notifierLambdaArn}",
                                           "Payload":{
                                              "opco_id.$":"$.id",
                                              "message.$":"$.error.Cause",
                                              "event":"ETL-PRICE_ZONE",
                                              "additional_info_file_s3.$":"$.intermediate_s3_name",
                                              "etl_output_path_key.$":"$.etl_output_path_key",
                                              "backup_bucket.$":"$.backup_bucket",
                                              "backup_file_path.$":"$.backup_file_path",
                                              "stepFunctionExecutionId.$":"$$.Execution.Id"
                                           }
                                        },
                                        "End":true
                                     }
                                  }
                               },
                               "ResultPath":"$.loadJobsResult",
                               "Next":"Analyze load job statusesC2"
                            },
                            "Analyze load job statusesC2":{
                               "Type":"Task",
                               "Resource":"arn:aws:states:::lambda:invoke",
                               "Parameters":{
                                  "FunctionName":"${jobStatusAnalyzerLambdaArn}",
                                  "Payload":{
                                     "allocated_job_count.$":"$.nextStep.Payload.allocatedJobCount",
                                     "loadJobStatuses.$":"$.loadJobsResult",
                                     "s3_object_key.$":"$.s3_input_file_key",
                                     "etl_timestamp.$":"$.etl_timestamp",
                                     "cluster_opcos.$":"$.opcoList.Payload.cluster_b",
                                     "cluster":2,
                                     "ENV.$":"$.ENV"
                                  }
                               },
                               "ResultPath":"$.loadJobStatuses",
                               "Catch":[
                                  {
                                     "ErrorEquals":[
                                        "States.TaskFailed"
                                     ],
                                     "ResultPath":"$.error",
                                     "Next":"Notify FailureC2"
                                  }
                               ],
                               "Next":"BackupOrNotC2"
                            },
                            "BackupOrNotC2":{
                               "Comment":"Check on load job statuses and decide data backup",
                               "Type":"Choice",
                               "Choices":[
                                  {
                                     "Variable":"$.loadJobStatuses.Payload.shouldBackup",
                                     "BooleanEquals":true,
                                     "Next":"Backup DataC2"
                                  }
                               ],
                               "Default":"Skip BackupC2"
                            },
                            "Backup DataC2":{
                               "Comment":"Backup data python shell job",
                               "Type":"Task",
                               "Resource":"arn:aws:states:::glue:startJobRun.sync",
                               "Parameters":{
                                  "JobName":"${priceZoneDataBackupJobName}",
                                  "Arguments":{
                                     "--s3_input_bucket.$":"$.s3_input_bucket",
                                     "--s3_input_file_key.$":"$.s3_input_file_key",
                                     "--etl_timestamp.$":"$.etl_timestamp",
                                     "--partitioned_files_key.$":"$.partitioned_files_key",
                                     "--decompressed_file_path.$":"$.decompressed_file_path",
                                     "--etl_output_path_key.$":"$.etl_output_path_key",
                                     "--backup_file_path.$":"$.backup_file_path",
                                     "--intermediate_directory_path.$":"$.intermediate_directory_path",
                                     "--file_type.$" : "$.file_type"
                                  }
                               },
                               "ResultPath":"$.response",
                               "Catch":[
                                  {
                                     "ErrorEquals":[
                                        "States.TaskFailed"
                                     ],
                                     "ResultPath":"$.error",
                                     "Next":"Notify FailureC2"
                                  }
                               ],
                               "Next":"Notify ETL SuccessC2"
                            },
                            "Skip BackupC2":{
                               "Type":"Succeed"
                            },
                            "Notify ETL SuccessC2":{
                               "Type":"Task",
                               "Resource":"arn:aws:states:::lambda:invoke",
                               "Parameters":{
                                  "FunctionName":"${notifierLambdaArn}",
                                  "Payload":{
                                     "event":"[ETL] - [Ref Price] [Price Zone Data]",
                                     "backup_bucket.$":"$.backup_bucket",
                                     "backup_file_path.$":"$.backup_file_path",
                                     "message.$":"States.Format('S3 Path: {}, ETL timestamp: {}, Execution Id: {}', $.s3_path, $.etl_timestamp, $$.Execution.Id)",
                                     "additional_info_file_s3":"${backupS3Name}",
                                     "etl_timestamp.$":"$.etl_timestamp",
                                     "file_name.$":"$.s3_input_file_key",
                                     "etl_output_path_key.$":"$.etl_output_path_key",
                                     "status":"SUCCEEDED"
                                  }
                               },
                               "End":true
                            }
                         }
                      }
                   ]
                },
                "Notify Failure2":{
                   "Type":"Task",
                   "Resource":"arn:aws:states:::lambda:invoke",
                   "Parameters":{
                      "FunctionName":"${notifierLambdaArn}",
                      "Payload":{
                         "message.$":"States.Format('S3 Path: {}, ETL timestamp: {}, Execution Id: {}, Error: {}', $.s3_path, $.etl_timestamp, $$.Execution.Id, $.error.Cause)",
                         "event":"ETL-PRICE_ZONE",
                         "additional_info_file_s3.$":"$.intermediate_s3_name",
                         "additional_info_file_key.$":"$.intermediate_directory_path",
                         "backup_bucket.$":"$.backup_bucket",
                         "backup_file_path.$":"$.backup_file_path",
                         "etl_output_path_key.$":"$.etl_output_path_key",
                         "stepFunctionExecutionId.$":"$$.Execution.Id",
                         "etl_timestamp.$":"$.etl_timestamp",
                         "file_name.$":"$.s3_input_file_key"
                      }
                   },
                   "End":true
                }
             }
          }
        - {
            priceZoneDecompressJobName: !Ref PriceZoneDecompressJob,
            priceZoneTransformJobName: !Ref PriceZoneTransformJob,
            priceZoneDataLoadJobName: !Ref PriceZoneDataLoadJob,
            priceZoneDataBackupJobName: !Ref PriceZoneDataBackupJob,
            opCoFilesFetchLambdaArn: !GetAtt OpCoFilesFetchLambda.Arn,
            jobStatusAnalyzerLambdaArn: !GetAtt PriceZoneJobStatusAnalyzerLambda.Arn,
            waitStatusAnalyzerLambdaArn: !GetAtt PriceZoneETLWaitStatusAnalyzerLambda.Arn,
            AnalyseLoadOrWaitLambdaArn: !GetAtt PriceZoneAnalyseLoadOrWaitLambda.Arn,
            notifierLambdaArn: !Ref NotifierLambdaArn,
            metadataAggregator: !Sub 'CP-REF-PRICE-ETL-metadata-aggregator-${EnvironmentShort}',
            backupS3Name: !Ref ETLDataBackUpStorage,
            backupedAdditonalInfoFile: !Ref ETLDataBackUpStorage
        }
      LoggingConfiguration:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt PriceZoneStepFunctionExecutionLogs.Arn
        IncludeExecutionData: TRUE
        Level: ALL
      RoleArn: !Ref StepFuctionExecutionRole
      Tags:
        - Key: Technical:ApplicationName
          Value: !Ref ApplicationName
        - Key: Technical:ApplicationID
          Value: !Ref ApplicationID
        - Key: Technical:PlatformOwner
          Value: !Ref Owner
        - Key: Technical:Environment
          Value: !FindInMap [ EnvMap, !Ref EnvironmentShort, name ]
        - Key: Support_Email
          Value: !Ref SupportEmail
        - Key: Approver
          Value: !Ref Approver
        - Key: PO_Number
          Value: !Ref PONumber
        - Key: Project_ID
          Value: !Ref ProjectID
        - Key: 2WTAGGER
          Value: !Ref 2WTAGGER
        - Key: Platform
          Value: !Ref Platform
        - Key: Component
          Value: !Ref Component
